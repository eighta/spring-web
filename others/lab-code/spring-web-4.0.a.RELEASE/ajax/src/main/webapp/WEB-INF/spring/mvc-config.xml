<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Enables JSR-330 validation -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- Defines basic MVC defaults (handler adapter, mapping, date formatting, 
		etc) -->
	<mvc:annotation-driven validator="validator" />


	<!-- Configures a handler for serving static resources by forwarding to 
		the Servlet container's default Servlet. -->
	<mvc:default-servlet-handler />

	<!-- Get common stylesheet + images from classpath (see rewards project) -->
	<mvc:resources mapping="/resources/**" location="classpath:/web-resources/" />

	<!-- Interceptor to set caching response headers. Applied to all handler 
		mappings. -->
	<mvc:interceptors>
		<bean class="rewardsonline.FragmentRequestHandlingInterceptor" />
<!-- 		<bean -->
<!-- 			class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor"> -->
<!-- 			<property name="sessionFactory" ref="sessionFactory" /> -->
<!-- 		</bean> -->
	</mvc:interceptors>

	<!-- Define controllers which only render pages (i.e. nothing added to the 
		model) -->
	<mvc:view-controller path="/" view-name="welcome" />
	<mvc:view-controller path="/home" view-name="welcome" />

	<!-- Allows view beans to be found and used -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />

	<!-- Resolves view names to Tiles definitions -->
	<bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<property name="contentType" value="text/html" />
	</bean>

	<!-- View resolver that delegates to other controllers based on the content 
		type. Automatically picks up the other view resolver beans, so no viewResolvers 
		property has been specified. -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="cnManager" />
	</bean>

	<!-- Simple strategy: only path extension is taken into account -->
	<bean id="cnManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="ignoreAcceptHeader" value="false" />
		<property name="defaultContentType" value="text/html" />

		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xls" value="application/vnd.ms-excel" />
			</map>
		</property>
	</bean>

	<!-- Configures Tiles -->
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
				<value>/WEB-INF/accounts/tiles.xml</value>
			</list>
		</property>
	</bean>

	<!-- Resolves messages to support internationalization -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/WEB-INF/messages/global</value>
			</list>
		</property>
	</bean>

</beans>