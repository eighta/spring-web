Spring Web Flow
===============

JavaConf
--------
WebInitializer
AbstractAnnotationConfigDispatcherServletInitializer

WebMvcConfigurerAdapter
-MessageCodesResolver
-Validator

AbstractFlowConfiguration
-ApplicationContext(1)
-ApplicationContext(2)

MvcConfig
-WebFlowConfig
-Validator

WebFlowConfig
-MvcConfig

What are the different parts of a flow

The web flow has three main parts - States, Transition and Data.
States - States are points on the flow where an action happens or decision is made or a view is displayed. The end of a flow is also a state. Sometimes, to increase brewity, a subset of a flow can be combined together to form a sub-flow and then the sub-flow is a state in the main flow.
Transitions - Transition connects two states. A movement of request from one state to another is called a transition.
Data - Data is the information that is carried from one state to another. The life span of the data depends on the scope with which it is declared. 

OJO EN LA DIAPOSITVA DEL CURSO DICE:
-STATES, TRANSITIONS AND ACTIONS

States- There are five kinds of states

    View States - A view state displays information to a user or obtains user input using a form. a model can be passed to bind the elements of the form. The view may be implemented as any view defined in spring mvc. (e.g. JSP)
    	(first state in the file becomes "start state")
    Action States - Action states are where actions are perfomed by the spring beans. The action state transitions to another state. The action states generally have an evaluate property that describes what needs to be done. The evaluate is generally a method of one of the registered spring beans. The evaluate expression is a SpEL. More than one action can be configured in which case the actions will be executed one after the other.
    Decision States: Decision state is where a decision is made. A decision state has two transitions depending on whether the decision evaluates to true or false.
    Subflow States - It may be advantageous to call another flow from one flow to complete some steps. The sub flow returns to the original flow when it is complete. Data may be passed from the calling flow into the subflow and output data from the subflow may be retrieved into the calling flow.
    End States - The end state signifies the end of flow. If the end state is part of a root flow then the execution is ended. However, if its part of a sub flow then the root flow is resumed.

Web Flow Scope
--------------
(Flow Data Scopes) Flow Data can be stored as variables that can be created using the 'var' element or using the evaluate expression.
Variable scope - The lifespan of the variable depends on the scope with which it is declared. 

The scopes available are:
	
	Flow - Available within a flow. Not available in sub flows (HTTP Session) 
	View - Available only during the lifetime of a view. 
			Created when a view is created and destroyed once a view is destroyed (HTTP Session)
	Request - Available during the life of a request in a flow
	Flash - Available during the lifetime of a flow. However, once a state is rendered, the variable is cleared.
			(HTTP Session temporary)
    Conversation - The conversation scope starts when a flow starts and ends when the flow ends. 
    		It is available in sub flows (HTTP Session)

Spring Web Flow allows you to represent the page flows of your application in a clear 
and simple way and the good part is that you can use it Spring Web Flow with other 
frameworks like Struts, Spring and JSF.   
   
Advantages of Spring Web Flow:

    Page flow of the application is visible just by looking at XML or java configuration.
    Web flows are designed to be self contained, and thus are reusable multiple of times.
    The technique to capture the page flow remains the same for all the cases and there are no specialized approaches for particular situations.


How Web Flow Works

When Web Flow receives a transition request
-It is submitted to the same URL as current state
-The flow awakes up
-The next state is determined
-A redirect is issued to the new URL for the new state

Every Web Flow interaction uses "TWO" requests
 Consequence:
  -Data associated with the initial request is not available
	when the next state (view) is generated
  -So Webflow provides flash-scope
  

*Configuring Web Flow

Web Flow provides a Spring XML namespace for configuration
-Use to setup Web Flow inside Spring MVC

Recommendation:
-Define setup using two configuration files
--webflow-config.xml for core Web Flow system
--mvc-config.xml for Spring MVC adapters

*Steps to use within Spring MVC:

1 Configure a flow-registry (and builder-services)
2 Configure the flow-executor
3 Enable flow handling by Spring MVC
4 Setup FlowHandlerMapping (maps registered flows to resource URLs)

*The Flow Registry

-Stores your flow definitions by unique id

-Flows typically stored under /WEB-INF
-Options for registering flows
 >One at a time
 >Using a wildcard pattern
 
-Can be customized with "flow builder services"
 >Specify development mode
 >Specify view technology
 >Specify conversion service (same as MVC)
 
*Registering Flow Definitions

-One at a time
<webflow:flow-registry id="flowRegistry">
	<webflow:flow-location id="flights/checkin" path="/WEB-INF/flights/checkin/checkin.xml" />
</webflow:flow-registry>

-By using a wildcard pattern
 >The derived flow id is relative to the base path
<webflow:flow-registry id="flowRegistry" base-path="/WEB-INF/">
	<webflow:flow-location-pattern value="**/*-flow.xml" />
</webflow:flow-registry>

*Signaling Flow Events
 >/flights/checkin?execution=e1s1&_eventId=update
 
 **with forms
 <input type="submit" value="Next" class="button" name="_eventId_next" />
 
 *lab1
 /rewards/newReward > /persons/newPerson

Evaluation and Variables
------------------------

<evaluate> elements to invoke SpEL
<var> and <set>

<evaluate result="flowScope.itinerary" 
 expression="checkinAgent.findItinerary(passengerInfo)"/>

Spring EL Syntax
-----------------
<variable>[.property]
 
Variable resolution algorithm
-Busca en variables reservadas primero
-Busca en Web Flow Scopes de segundo
-Busca en Flow Application Context de tercero (Spring Beans)

Variables Reservadas SpEL
-------------------------
conversationScope
flowScope
viewScope
requestScope
flashScope
flowExecutionUrl
flowRequestContext
requestParameters
currentEvent
currentUser
externalContext
messageContext
resourceBundle

OJO: sessionScope NO EXISTE, usar: externalContext.sessionMap

Se definen dentro de los tags: <flow> y <view-state>

Actions During Transitions
--------------------------
-Corren antes que ocurra la transition
 >La transition solo ocurre si el <evaluate> return
 	-Boolean.TRUE or true
 	-String= sucess, yes, true
 	-Cualquier tipo o null

Solo un <evaluate> es permitido (WARNING)

<set> nunca detienen la transicion, es posible utilizar muchos

 *lab2

MISC
====
Los ids de los flows, son generados a partir de la carpeta en donde se encuentra el XML (authoring flow)
e.g. : 	/folder1/folder2/folder3/folder4/folder5/folderFlow-flow.xml
id:		"folder1/folder2/folder3/folder4/folder5"

**Los "View States" poseen un id, el cual resuelve a un "View Template", correspondiente al mismo nombre (id)
(por defecto id.jsp), pero obviamente se puede configurar el ViewResolution a travez de los ViewResolvers

**Las Transitions, manejan los eventos de un usuario
<transition on="findItinerary" to="reviewItinerary" />

**Existen las Global Transitions, que pueden ser llamadas desde cualquier view-state
<global-transition on="cancel" to="cancelled" />
NOTA: en el xml, me toco definirlas al final del archivo (de primeras lanzaba error)

**Sending End State Redirects
Use the <end-state> view attribute to specify the URL to redirect to
<end-state id="finish" view="externalRedirect:contextRelative:/flights/checkin/confirm?id=1" />

Can use:
"externalRedirect:" or "flowRedirect:"

Can use:
"servletRelative"		RELACIONADO CON EL SERVLET (frontController de Spring)
"contextRelative",		SE REFIERE AL NIVEL DEL CONTEXTO DEL WEB-APP
"serverRelative",		SOLO FUNCIONA CON:  externalRedirect (FUERA DE LA WEB-APP)

The explicit redirect prefixes supported are:
servletRelative: - redirect to a resource relative to the current servlet
contextRelative: - redirect to a resource relative to the current web application context path
serverRelative: - redirect to a resource relative to the server root
http:// or https:// - redirect to a fully-qualified resource URI

**MVC Flash Scope
Cuando se desea transmitir un dato desde WebFlow a Mvc 

>Se debe habilitar en el FlowHandlerAdapter
<property name="saveOutputToFlashScopeOnRedirect" ref="true"/>

>utilizando el tag: <output name="confirmationNumber" value="1"/>

**To signal an event JSP views use a naming convention for form buttons:
>_eventId_xxx
<button name="_eventId_findItinerary" type="submit">
	Find Itinerary
</button>

>A view can also add _eventId to HTML links
– /flights/checkin?execution=e1s1&_eventId=update

>JSF views specify the event in the action attribute of command buttons and links
<h:commandButton id="findItineraryButton"
	action="findItinerary”
	value="Find Itinerary" />

**Testing Flows
Every flow should have a unit test
– Verifies flow logic works as expected

Web Flow provides JUnit test support
– Extend from a base test class

Define a new TestCase class per Flow
– e.g. FlightCheckinFlowExecutionTests


[DOCUMENTATION]
http://docs.spring.io/spring-webflow/docs/current/reference/htmlsingle/
http://docs.spring.io/spring-webflow/docs/current/reference/html/defining-flows.html [DONE]
http://docs.spring.io/spring-webflow/docs/current/reference/html/el.html
https://www.adictosaltrabajo.com/tutoriales/primerospasos-spring-web-flow-2/