Links (urls)
============

#Java 8 Predicate
http://howtodoinjava.com/java-8/how-to-use-predicate-in-java-8/
https://dzone.com/articles/writing-clean-predicates-java

#FUTURES
http://www.nurkiewicz.com/2013/02/javautilconcurrentfuture-basics.html

#DATA FORMATS
www.yegor256.com/2015/11/16/json-vs-xml.html
https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats
http://maxondev.com/serialization-performance-comparison-c-net-formats-frameworks-xmldatacontractserializer-xmlserializer-binaryformatter-json-newtonsoft-servicestack-text/
https://dzone.com/articles/human-readable-vs-machine
http://www.baeldung.com/java-convert-byte-array-to-reader

#MAVEN - Resolucion de Depedencias incompatibles
https://tedvinke.wordpress.com/2013/12/17/mixing-junit-hamcrest-and-mockito-explaining-nosuchmethoderror/

#SPRING - REST
https://spring.io/guides/tutorials/bookmarks/

Type Parameter Naming Conventions

By convention, type parameter names are single, uppercase letters. This stands in sharp contrast to the variable naming conventions that you already know about, and with good reason: Without this convention, it would be difficult to tell the difference between a type variable and an ordinary class or interface name.

The most commonly used type parameter names are:

E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types

Type Parameter and Type Argument Terminology: Many developers use the terms "type parameter" and "type argument" interchangeably, but these terms are not the same. When coding, one provides type arguments in order to create a parameterized type. Therefore, the T in Foo<T> is a type parameter and the String in Foo<String> f is a type argument. T

