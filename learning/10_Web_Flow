Spring Web Flow
===============

Spring Web Flow (SWF) is a component of the Spring Framework’s web stack that was created
to help develop complex applications by reducing the difficulty in development.

>>>support controlled page navigation and state transition; all of this adds
up to a rigorously defined conversation between the end user and the application.

Spring Web Flow brings to the possibility to define flows as separate components
detached from the rest of the implementation—web-specific classes and views.

The flow components can be defined and used similar to the way beans are used in Spring.

What Is a Flow?
A flow models the sequence of steps necessary to perform a task.

In Spring Web Flow, a flow consists of a series of steps called states. A flow will always have only one
start point and one or more end points. Leaving one state and passing into another can be restricted by the
result of a conditional expression.

Web Flow Architecture
---------------------
In Spring Web Flow, flows are defined using an XML-based flow definition language.

>The FlowController(1) class is the adapter between the Spring MVC Controller layer and the Spring Web
Flow engine. Its responsibility is to provide implementation so that Spring Web Flow can run embedded as a
controller within a DispatcherServlet. So basically, the FlowController is itself a front controller for Spring
Web Flow.

>The FlowHandlerMapping(2) maps all flow requests to the appropriate handlers using
FlowDefinitionRegistry(3).

>The FlowHandlerAdapter(4) takes care of executing the flow handler methods in a
servlet environment using the FlowExecutor(5) implementation.

After they do their jobs, the DispatcherServlet(0) uses the FlowViewResolver(6) interface to resolve a view
from the state of an executing flow.

When working with flows, each flow definition is declared in a specific configuration (XML) file and is
registered in the system by the FlowDefinitionRegistry

The flows are exposed to the client as web resources. The client starts flows by accessing these resources. 
For example, accessing http://localhost:8080/webflow-basic/persons/newPerson 
starts the newPerson flow.

Starting a flow actually means starting a new flow execution, meaning an execution context for the task 
currently in progress is created

The execution context is user session-scoped, meaning all the variables and data needed for the
execution of the task is kept in the user session, unless an execution step requires otherwise. (Sometimes
data can be saved to the database and removed from the session.)

Web Flow Internal Logic
-----------------------
When the flow starts executing, you can use the URL changing to
http://localhost:8080/webflow-basic/persons/newPerson?execution=e1s1

The parameter execution is the session-scoped execution key. Its value contains the flow execution
identifier (e1) and the identifier of the execution step that is currently in progress (s1). Every time the
flow progresses a step, the step identifier is incremented. Every time a new flow execution is started, the
execution identifier is incremented.

A user resumes flow executions by clicking buttons in the interface—buttons (or links) that have events
associated with them using the name property. For example:

<button id="newPersonButton" name=" eventId proceed" type="submit">
	<spring:message code="command.proceed" />
</button>

So when the button with the newPersonButton id is clicked, a request is sent to the URL.
.../persons/newPerson?execution=e1s1&_event_id=proceed

The data provided by the user is bound to the flow context. The flow handles the event, processes the
data as defined, and decides what to do next based on the definition of the flow: display a new view to the
user, display the same view, and remain in the same step of execution if validation failed or ends the flow.
When a flow execution has ended, the execution cannot be resumed; this implies that the transaction cannot
be completed multiple times. After a flow execution ends, the flow state is automatically cleaned.

The interaction between a client and a flow always consists of two separate steps: the client will request
a resource or activate (trigger) an event and the flow will redirect to the appropriate state. This means that
each web flow interaction involves two requests: 
	the client request and the flow redirect request. 

This has another implication: the data submitted by the initial request will not be available after 
the redirecting is done and the next view has already been rendered. 
But there are ways of persisting the data across requests when using web flows.

IMAGEN: interaction_between_client_and_flow.png

Configuration and Infrastructure Beans
--------------------------------------

When configuring an application that uses Web Flow, there are roughly three steps that have to be
covered:

1. A flow executor and a flow registry bean have to be defined and configured to
match the structure of the application so that the flows can be executed correctly
by Spring Web Flow.

2. A flow adapter and a flow mapping bean have to be defined and added to the
list of existing handler mapping and handler adapter beans for the Spring MVC
configuration to enable flow handling by Spring MVC

3. An MvcViewFactoryCreator bean has to be created and configured to use the
bean view resolvers already defined in the application.

The FlowHandlerMapping must be the first HandlerMapping
implementation used to try to retrieve a mapping to make sure that the flow is identified correctly
order="-1" is used to set the highest priority in the handler mappings list.
This class returns null in the case of no flow id match, 
allowing the next handler mapping in the chain to execute

flowExecutor: This bean created is of type FlowExecutorImpl and it uses the
flowRegistry bean to identify all flows eligible for execution. This bean is the
entry point into the Web Flow system, as it manages starting and resuming flow
executions. When an executor bean is created, Spring automatically looks for a flow
registry bean named flowRegistry, so the definition can be simplified to
<webflow:flow-executor id="flowExecutor"/>

flowRegistry: Each flow definition registered in this registry bean is assigned a
unique identifier. The base-path property is used specify the root directory, under
which all the flow definition files are found; usually this is the WEB-INF directory.
The flow-location-pattern further narrows the search for the flow definitions,
providing a wildcard template file name for the flow definition files. But flow
definitions can be also registered one at a time using flow-location elements. For
example:

<webflow:flow-registry id="flowRegistry" base-path="/WEB-INF"
flow-builder-services="flowBuilderServices">
<webflow:flow-location path="persons/newPerson/newPerson-flow.xml"/>
</webflow:flow-registry>

flowBuilderServices: This bean registers custom implementations of services
needed to build flow definitions: view resolvers, data convertors, formatters,
validators, and others. In version 2.4.0.RELEASE, the validation-hints were added,
so flow definition can apply partial validation on the model through the validationhints
attribute supported on view state and transition elements. This bean was
modified to add a property named validation-hint-resolver that can be used to
set a custom validation hints resolver. 

The development="true" is quite important, because as you will solve the practice exercises, you might
not want to restart the application every time you make a change to a flow definition. Setting the development
property to "true" ensures that changes to a flow definition is autodetected and results in a flow refresh.

mvcViewFactoryCreator: This bean is used by a FlowBuilder to configure a flow's
view states with Spring MVC based view factories. 

In this case, the tiles view resolver is injected into it, so it can be used to resolve view states using it. 
The useSpringBeanBinding property is set to "true" to enable the same binding system
used by the Spring MVC in a Web Flow environment.

conversionService: This bean is a wrapper for the conversion service bean used by
Spring MVC, which is provided to the flowBuilderServices bean to be used during
a flow execution

FlowController: This class is the bridge between the Spring MVC
Controller layer and the Spring Web Flow engine; it allows Spring Web Flow to run embedded as a Controller
within a DispatcherServlet and it is used internally. This class uses the handlers and executor defined in the
configuration to execute flows; it does this transparently.

Create a Flow
-------------

A flow describes a sequence of steps that is executed in the order established by the flow definition. 
A web flow is made of tree types of elements: states, transitions, and data.

In a flow definition, the following types of states can be used:

>View state: In this type of state, the execution of a flow is paused to render a view
to the user and wait for input data. It is defined using the <view-state ../> XML
element.

>Action state: In this type of state, Java code is executed, and sometimes the next state
to transition to depends on the outcome of this code. It is defined using the <action-
state ../> XML element.

>Decision state: In this type of state, some branch logic is implemented using the
XML flow definition language. It is defined using the <decision-state ../> XML
element.

>Subflow state: The execution is transferred to another flow. When the subflow
execution is completed, the execution will return to this state. It is defined using the
<decision-state ../> XML element.

>End state: The final state of the flow execution. It is not mandatory for this state to
render a view, but usually a confirmation view is rendered to the user. It is defined
using the <end-state ../> XML element.

The switch from one state to the other is called a transition and it is triggered by events. Some data can
be shared among states, depending on the scope of that data.

The data is the information that is carried from one state to
the other; it has a life span that depends on the scope on which it was declared.

Flow Definition
---------------
A flow is defined in a single XML file, and all the states composing it are defined as child elements of the
flow element. The content of the flow element is actually a task algorithm.

All resources used by a flow (views, internationalization files) when being executed must be placed in the 
same directory as the flow definition file.

Basically, each flow defined in an application has its own directory that contains all flow
definition resources.

When developing a flow, it is recommended to think and design the flow logic first—define the states
and transitions, review the flow with business analysts, use mock views (plain HTML files that replace the
view in testing scenarios)—to depict the steps and then add the behavior. To define the states of a flow, the
*-flow.xml file must be populated. Usually, the first step is a view-state that displays a view to the user to
provide data to the flow.

CONTINUAR PAGINA: 274