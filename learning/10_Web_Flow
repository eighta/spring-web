Spring Web Flow
===============

Spring Web Flow (SWF) is a component of the Spring Framework’s web stack that was created
to help develop complex applications by reducing the difficulty in development.

>>>support controlled page navigation and state transition; all of this adds
up to a rigorously defined conversation between the end user and the application.

Spring Web Flow brings to the possibility to define flows as separate components
detached from the rest of the implementation—web-specific classes and views.

The flow components can be defined and used similar to the way beans are used in Spring.

What Is a Flow?
A flow models the sequence of steps necessary to perform a task.

In Spring Web Flow, a flow consists of a series of steps called states. A flow will always have only one
start point and one or more end points. Leaving one state and passing into another can be restricted by the
result of a conditional expression.

Web Flow Architecture
---------------------
In Spring Web Flow, flows are defined using an XML-based flow definition language.

>The FlowController(1) class is the adapter between the Spring MVC Controller layer and the Spring Web
Flow engine. Its responsibility is to provide implementation so that Spring Web Flow can run embedded as a
controller within a DispatcherServlet. So basically, the FlowController is itself a front controller for Spring
Web Flow.

>The FlowHandlerMapping(2) maps all flow requests to the appropriate handlers using
FlowDefinitionRegistry(3).

>The FlowHandlerAdapter(4) takes care of executing the flow handler methods in a
servlet environment using the FlowExecutor(5) implementation.

After they do their jobs, the DispatcherServlet(0) uses the FlowViewResolver(6) interface to resolve a view
from the state of an executing flow.

When working with flows, each flow definition is declared in a specific configuration (XML) file and is
registered in the system by the FlowDefinitionRegistry

The flows are exposed to the client as web resources. The client starts flows by accessing these resources. 
For example, accessing http://localhost:8080/webflow-basic/persons/newPerson 
starts the newPerson flow.

Starting a flow actually means starting a new flow execution, meaning an execution context for the task 
currently in progress is created

The execution context is user session-scoped, meaning all the variables and data needed for the
execution of the task is kept in the user session, unless an execution step requires otherwise. (Sometimes
data can be saved to the database and removed from the session.)

Web Flow Internal Logic
-----------------------
When the flow starts executing, you can use the URL changing to
http://localhost:8080/webflow-basic/persons/newPerson?execution=e1s1

The parameter execution is the session-scoped execution key. Its value contains the flow execution
identifier (e1) and the identifier of the execution step that is currently in progress (s1). Every time the
flow progresses a step, the step identifier is incremented. Every time a new flow execution is started, the
execution identifier is incremented.

A user resumes flow executions by clicking buttons in the interface—buttons (or links) that have events
associated with them using the name property. For example:

<button id="newPersonButton" name=" eventId proceed" type="submit">
	<spring:message code="command.proceed" />
</button>

So when the button with the newPersonButton id is clicked, a request is sent to the URL.
.../persons/newPerson?execution=e1s1&_event_id=proceed

The data provided by the user is bound to the flow context. The flow handles the event, processes the
data as defined, and decides what to do next based on the definition of the flow: display a new view to the
user, display the same view, and remain in the same step of execution if validation failed or ends the flow.
When a flow execution has ended, the execution cannot be resumed; this implies that the transaction cannot
be completed multiple times. After a flow execution ends, the flow state is automatically cleaned.

The interaction between a client and a flow always consists of two separate steps: the client will request
a resource or activate (trigger) an event and the flow will redirect to the appropriate state. This means that
each web flow interaction involves two requests: 
	the client request and the flow redirect request. 

This has another implication: the data submitted by the initial request will not be available after 
the redirecting is done and the next view has already been rendered. 
But there are ways of persisting the data across requests when using web flows.

IMAGEN: interaction_between_client_and_flow.png

Configuration and Infrastructure Beans
--------------------------------------

When configuring an application that uses Web Flow, there are roughly three steps that have to be
covered:

1. A flow executor and a flow registry bean have to be defined and configured to
match the structure of the application so that the flows can be executed correctly
by Spring Web Flow.

2. A flow adapter and a flow mapping bean have to be defined and added to the
list of existing handler mapping and handler adapter beans for the Spring MVC
configuration to enable flow handling by Spring MVC

3. An MvcViewFactoryCreator bean has to be created and configured to use the
bean view resolvers already defined in the application.

The FlowHandlerMapping must be the first HandlerMapping
implementation used to try to retrieve a mapping to make sure that the flow is identified correctly
order="-1" is used to set the highest priority in the handler mappings list.
This class returns null in the case of no flow id match, 
allowing the next handler mapping in the chain to execute

flowExecutor: This bean created is of type FlowExecutorImpl and it uses the
flowRegistry bean to identify all flows eligible for execution. This bean is the
entry point into the Web Flow system, as it manages starting and resuming flow
executions. When an executor bean is created, Spring automatically looks for a flow
registry bean named flowRegistry, so the definition can be simplified to
<webflow:flow-executor id="flowExecutor"/>

flowRegistry: Each flow definition registered in this registry bean is assigned a
unique identifier. The base-path property is used specify the root directory, under
which all the flow definition files are found; usually this is the WEB-INF directory.
The flow-location-pattern further narrows the search for the flow definitions,
providing a wildcard template file name for the flow definition files. But flow
definitions can be also registered one at a time using flow-location elements. For
example:

<webflow:flow-registry id="flowRegistry" base-path="/WEB-INF"
flow-builder-services="flowBuilderServices">
<webflow:flow-location path="persons/newPerson/newPerson-flow.xml"/>
</webflow:flow-registry>

flowBuilderServices: This bean registers custom implementations of services
needed to build flow definitions: view resolvers, data convertors, formatters,
validators, and others. In version 2.4.0.RELEASE, the validation-hints were added,
so flow definition can apply partial validation on the model through the validationhints
attribute supported on view state and transition elements. This bean was
modified to add a property named validation-hint-resolver that can be used to
set a custom validation hints resolver. 

The development="true" is quite important, because as you will solve the practice exercises, you might
not want to restart the application every time you make a change to a flow definition. Setting the development
property to "true" ensures that changes to a flow definition is autodetected and results in a flow refresh.

mvcViewFactoryCreator: This bean is used by a FlowBuilder to configure a flow's
view states with Spring MVC based view factories. 

In this case, the tiles view resolver is injected into it, so it can be used to resolve view states using it. 
The useSpringBeanBinding property is set to "true" to enable the same binding system
used by the Spring MVC in a Web Flow environment.

conversionService: This bean is a wrapper for the conversion service bean used by
Spring MVC, w	hich is provided to the flowBuilderServices bean to be used during
a flow execution

FlowController: This class is the bridge between the Spring MVC
Controller layer and the Spring Web Flow engine; it allows Spring Web Flow to run embedded as a Controller
within a DispatcherServlet and it is used internally. This class uses the handlers and executor defined in the
configuration to execute flows; it does this transparently.

Create a Flow
-------------

A flow describes a sequence of steps that is executed in the order established by the flow definition. 
A web flow is made of tree types of elements: states, transitions, and data.

In a flow definition, the following types of states can be used:

>View state: In this type of state, the execution of a flow is paused to render a view
to the user and wait for input data. It is defined using the <view-state ../> XML
element.

>Action state: In this type of state, Java code is executed, and sometimes the next state
to transition to depends on the outcome of this code. It is defined using the <action-
state ../> XML element.

>Decision state: In this type of state, some branch logic is implemented using the
XML flow definition language. It is defined using the <decision-state ../> XML
element.

>Subflow state: The execution is transferred to another flow. When the subflow
execution is completed, the execution will return to this state. It is defined using the
<decision-state ../> XML element.

>End state: The final state of the flow execution. It is not mandatory for this state to
render a view, but usually a confirmation view is rendered to the user. It is defined
using the <end-state ../> XML element.

The switch from one state to the other is called a transition and it is triggered by events. Some data can
be shared among states, depending on the scope of that data.

The data is the information that is carried from one state to
the other; it has a life span that depends on the scope on which it was declared.

Flow Definition
---------------
A flow is defined in a single XML file, and all the states composing it are defined as child elements of the
flow element. The content of the flow element is actually a task algorithm.

All resources used by a flow (views, internationalization files) when being executed must be placed in the 
same directory as the flow definition file.

Basically, each flow defined in an application has its own directory that contains all flow
definition resources.

When developing a flow, it is recommended to think and design the flow logic first—define the states
and transitions, review the flow with business analysts, use mock views (plain HTML files that replace the
view in testing scenarios)—to depict (<<<REPRESENTAR) the steps and then add the behavior. 
To define the states of a flow, the *-flow.xml file must be populated. 
Usually, the first step is a view-state that displays a view to the user to
provide data to the flow.

States
------
<view-state id="enterPersonInfo"/>

The view-state id resolves to a view template; by default, a *.jsp file is searched for in the current
directory. View resolution is pluggable, depending on the view technology used.

In the examples given in this book, Apache Tiles are used to define and resolve views; 
so the view to display when entering the enterPersonInfo state is defined in the tiles.xml under the flow directory.

Transitions
-----------
Next, a transition must be defined by adding the <transition> element as a child to the state you
are transitioning from when a user event is activated. If no navigation is performed (for example, when
validation fails), the initial view is refreshed.

When performing typical web navigations, there is always a Cancel button that allows the user to cancel
the whole process. When using Spring Web Flow, this can be done by declaring a <global-transition>
element, but using global transition elements sort of breaks the flow. It’s similar to using a goto statement.
It also makes the flow definition less readable.

A flow can have one or multiple end-states defined (<end-state> elements are used to define them)
and a flow execution can end in any of them, based on the events the user triggers. After a flow execution
reaches an end state, the flow terminates and the outcome is returned, unless the end state sends a final
response or redirects the user to another resource, typically a confirmation page.

Redirecting to a confirmation page after a flow has finished the execution is tricky, as the flow data is
gone. The solution is to use a redirect to a stateless confirmation page and to use a parameter that has a
value that can be used to display confirmation data. The <end-state> element has a view attribute that can
be used to specify the URL to redirect to.

The contextRelative prefix is one of the explicit redirects supported in the context of a flow execution.
Without these prefixes, the returned resource location is relative to the current servlet mapping. The flow
redirect prefixes help you have more control over where the user is redirected. The following is the complete
list of flow redirection prefixes:

-servletRelative: Redirects to a resource relative to the current server
-contextRelative: Redirects to a resource relative to the current web application context path
-serverRelative: Redirects to a resource relative to the server root
-http:// or https:// Redirects to a fully qualified resource URI

These redirect prefixes are supported in a flow definition together with the externalRedirect: directive
in view-state or end-state elements. The view-state element has a view property that can be used to
specify a different view than the one with the same state id, and this view can be outside the newPerson flow
directory

<view-state id="reviewPerson" view="externalRedirect:contextRelative:/verifyPerson">
	<transition on="confirm" to="enterIdentityCard"/>
</view-state>

A flow can also redirect to a different flow by using the flowRedirect: directive in its end state; this
basically means the current flow ends and a new one is started.

In conclusion, when creating a web flow, it is recommended that the following steps be followed in this
order:

1.	Define view states and end states.
2.	Define transition between states.
3.	Create mock views to test the connection of the states.
4.	Add the intended behavior.

Testing Web Flows
-----------------
The Spring Web Flow provides a test 
class at org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests 
that has to be extended to use unit tests to test flows

Actions and Scopes
------------------
Actions are defined in Spring Web Flow using the Spring Expression Language

There are five web flow scopes that are supported by the context of a flow:
-Flow scope: This is the scope that lasts until the flow ends.
-View scope: This is the scope associated with each view-state.
-Request scope: This is the scope matching a single request
-Flash scope: This the scope allocated when a flow starts; it is cleaned automatically
after each view is rendered and destroyed when the flow ends.
-Conversation scope: This is a global execution scope; all subflows share this scope.
It gets allocated when a top-level flow starts and it is destroyed when the top-level
flow ends.

When using Spring EL to write expressions, a few reserved variables can be used without any prior
manual initialization (Spring takes care of initializing them).

scope-specific variables: 
 requestScope, 
 flashScope, 
 viewScope, 
 flowScope,
 conversationScope

environment-specific variables: 
 flowExecutionUrl, 
 flowRequestContext,
 requestParameters, 
 externalContext, 
 messageContext, 
 resourceBundle,
 currentEvent, 
 currentUser

externalContext.sessionMap is used to access HTTP session contents.
(No sessionScope variable exists in the context of a flow definition.)

Some of these variables can be used in view template files also; in JSP, all scope variables are accessible,
 flowExecutionUrl is the URL of the current page, 
 flowRequestContext is the RequestContext. 

Additional variables are available: pageScope, requestParameters, sessionScope, and so forth.

Excelente ejercio: pag 290
requestScope vs flashScope

Model Objects
-------------
The model is populated with the request parameter process, also known as data binding.

Validation and conversion are supported for all properties, but can be suppressed if needed (usually during
development) using the bind and validation attributes on the <transition /> element, by setting them to
"false".

Validation, Formatting, and Conversion
--------------------------------------
Formatters and converters used with web flows are the same as in Spring MVC: default ones are present
out of the box, and custom formatters and converters have to be declared and associated with the web flow
engine using the flow builder services. 

The same goes for validators: they have to be set on the flow builder services to be used.

[A Spring convertor is a general-purpose class used for conversion between two types that implement
org.springframework.core.convert.converter.GenericConverter or one of its subinterfaces, or
implement org.springframework.core.convert.converter.Converter<S,T> or subinterfaces.]

[A Spring formatter is a class specializing in transforming objects into strings or vice-versa, because when
Spring MVC or Spring Web Flow is used, this is the focus of model objects. The classes must implement the
org.springframework.format.Formatter<T> interface or one of its subinterfaces. The Formatter<T>
interface is favored by developers because it is more suitable for web applications]

Although the registered converters are applied to any model objects, if needed, a different converter
can be set for a property using the converter attribute of the <binding /> element.

<view-state id="enterIdentityCardInfo" model="identityCard">
	<binder>
		<binding property="emittedAt" required="true" converter="simpleDate"/>
		...
	</binder>
</view-state>

JSR 349 bean validation is supported and annotations on the form object properties are used to set up
the validation; but to enable it, a bean of type LocalValidatorFactoryBean has to be defined and set on the
on the flowBuilderServices bean. A validator set on the FlowBuilderServices bean is applied to all model
objects in the application. For customizations, custom validators can also be used, just like in Spring MVC.

JSR-349 bean validation supports partial validation through validation groups. 6 A group defines a
subset of constraints. Instead of validating all constraints for a given object graph, only a subset is validated.
This subset is defined by the group or groups targeted.

@NotEmpty
@Size(min=2, max=50, groups=NameRule.class)
public String firstName;

@NotEmpty
@Size(min=2, max=50, groups=NameRule.class)
public String lastName;

In a flow definition, the equivalent of validation groups can be implemented using the
validation-hints attribute on the <view-state />:

<!-- Flow definition file-->
<view-state id="enterPersonInfo" model="person" validation-hints="group1,group2">
<transition on="submit" to="enterIdentityCardInfo">
<evaluate expression="personValidator.check(person, messageContext)"/>
</transition>
</view-state>

The validation groups are used to group together fields of the model object that are subjected to
validation together.

@NotEmpty
@Size(min=2, max=50, groups={"group1,group2"})
public String firstName;

@NotEmpty
@Size(min=2, max=50, groups={"group1"})
public String lastName;

The validation-hints attribute is an expression that resolves to a comma-delimited string consisting
of hints that are resolved by a ValidationHintResolver bean. By default, Spring uses a bean of type org.
springframework.webflow.validation.

A custom ValidationHintResolver can also be provided if necessary, but has to be set on the
FlowBuilderServices in the web flow configuration. In the following, you can see an XML and Java

<!-- webflow-config.xml -->
<webflow:flow-builder-services id="flowBuilderServices"
view-factory-creator="mvcViewFactoryCreator"
conversion-service="conversionService"
validation-hint-resolver="customValidationHintResolver" />

<!-- WebFlowConfig.class-->
@Bean
public FlowBuilderServices flowBuilderServices() {
return getFlowBuilderServicesBuilder()
.setViewFactoryCreator(mvcViewFactoryCreator())
.setValidator(this.mvcConfig.validator())
.setConversionService(conversionService())
.setValidationHintResolver(customValidationHintResolver())
.setDevelopmentMode(true)
.build();
}

Action States
-------------
type of action implementation is suitable to a certain case.

-No action: Easy to use: just plug in a business method call in the web flow definition.
The main disadvantage here is the tight coupling between business logic and
the flow definition, and the fact that business method calls can make your web
flow definition look crowded. It is proper for usage in simple web flows in simple
applications.

-POJO action: Can be used to glue the flow logic with the business login in a
decoupled way and provides a flexible way to solve business layer exceptions; but the
disadvantage is that the flow definitions might become more complex.

-Plain action: There are not many cases when this should be used, except of course,
for explanatory exercises when teaching Spring Web Flow.

-MultiAction: Offers all the advantages of a POJO action, and the code for the
implementation class might become quite complex.


Decision States
---------------
<!-- newPerson-flow.xml -->
<action-state id="checkDuplicate">
<evaluate expression="personAction" />
<transition on="success" to="enterIdentityCardInfo"/>
</action-state>

The decision state type is an alternative for an action state type; when based on an evaluated expression,
there are multiple possibilities of transitioning.

<!-- newPerson-flow.xml -->
<decision-state id="checkDuplicate">
<if test="personService.isNewPerson(person)" then="enterIdentityCardInfo"
else="reviewExistingPerson"/>
</decision-state>

page 311