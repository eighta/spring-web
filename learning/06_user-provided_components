Controllers
===========

Controllers are POJOs�simple beans annotated with the @Controller annotation�that are used 
to handle requests. Each controller class contains methods that are mapped to a 
request URL via the @RequestMapping annotation. 

These methods are used to handle different requests. Each method executes three steps:
1. Invoke services.
2. Populate a model.
3. Select a view.

Con los argumentos de un metodo de controlador con @RequestParam,
se pueden leer por parametros enviados en un request.
@RequestParam("id") Long id
Sin embargo, hay que tener cuidado con los tipos de datos,
por naturaleza la url es una cadena , por ende los parametros tambien son string
al declararlo de un tipo especifico, como Long, en el ejemplo anterior,
la maquina virtual intentara convertir el parametro al tipo de dato.
String to Long >>>OK!!!
String to Date >>>ERROR!

URL: 
	/ctrls/f/1?dateOfBirth=1982-10-01
MAPING:
	@RequestParam("dateOfBirth") 
	Date date

Este error se da porque Spring no conoce como realizar dicha conversion, lanzando:
Caused by: org.springframework.core.convert.ConversionFailedException: 
Failed to convert from type [java.lang.String] to type 
[@org.springframework.web.bind.annotation.RequestParam java.util.Date] 
for value '1982-10-01'; nested exception is java.lang.IllegalArgumentException

Bueno, en realidad si sabe como convertir un String a un Date, la anterior excepcion
sale, es porque al intentar hacer dicha conversion, falla por formato fecha que 
por defecto en ese instante tiene la maquina virtual,
En mi caso, fallo porque la maquina virtual esta configurada con el patron: dd/MM/yyyy
Si la URL es:
	/ctrls/f/1?dateOfBirth=01/10/1982
Se responde (convierte) correctamente

En caso tal, que se desee un formato en especifico, pero si tener que 
cambiar el patron por defecto de la maquina virtual, se puede
especificar el patron de fecha asi:

@RequestParam("dateOfBirth") 
@DateTimeFormat(pattern = "yyyy-MM-dd")
Date date,
 

NOTA: de casualidad me doy cuenta que:
-en los controladores los paths: 
".../personas" (sin el slash final) y
".../personas/" (con el slash final)
Responden al mismo requestMapping method,
diferente a los ViewController que registran
url->vista,
ni tampoco en el context de spring
para mi ejemplo, no es lo mismo /s/ que /s (sin slash final)

Testing Controllers
===================

When testing controllers, the focus is to check that handler methods return the expected logical view name
and that the expected data has been placed in the model as an attribute. When doing unit testing, the
manager does not need to be involved, as saving data to the database defeats the purpose of testing a small
unit. So managers used in the controllers can be replaced with skeleton objects with simulated functionality.
This can be done by creating skeleton objects, called stubs, or mocking libraries can be used, to pass to them
the responsibility of implementing the objects according to the desired functionality.

Handler Interceptors
====================

Handler interceptors are very useful for adding common functionality for all controllers inside an
application. For example, a handler interceptor in an application could be used to audit requests, or to
monitor the execution time of handler methods, or to generate performance reports. The most obvious
examples for the use of an interceptor are internationalization, validation of data in the request, and request
data convertors.

The handler interceptors are beans in the application context. A handler interceptor class must
implement the HandlerInterceptor interface and provide concrete implementation for any of the methods
that the user is interested in:
- preHandle: Called after the HandlerAdapter has identified the handler method and
before its invocation. This method controls the execution of other interceptors in the
chain and the handler method by returning a Boolean value.
- postHandle: Called after the HandlerAdapter invokes the handler method and
before the DispatcherServlet renders the view (can add extra objects to the model).
- afterCompletion: Called after the request has processed and the view has rendered.

The interceptors that modify the response before serialization must implement
ResponseBodyInterceptor and provide an implementation for the beforeBodyWrite method.

View Technologies
=================
Based on the type of content being generated, the views can be categorized as follows:
- Display views: The response is an HTML page generated using a template: JSP, Tiles,
Thymeleaf, FreeMarker, or Velocity.
- File-generating views: The response is an output file when rendered and it is
automatically downloaded by the browser: Apache POI, JExcelApi (Excel), IText
(PDF), JasperReports, or XSLT transformation.
- Data-delivery views: The response is actually just data and it is meant to be used
with AJAX and web services: JSON, Java-XML Marshalling, Atom, and RSS.

Tiles and Thymeleaf another view technology

Forms
=====

When it comes to using Spring forms, three key subjects must be well understood to use them like
an expert: formatting, data binding, and validation;

Data Formatting continuar en la pagina 138 de 433 (12 AGO 2016 AUN NO CONTInuO :-( )
